# .github/workflows/sync-develop.yml
name: Sync develop with main

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-develop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch branches
        run: |
          git remote set-url origin "https://github.com/${GITHUB_REPOSITORY}.git"
          git fetch --prune --tags origin

      - name: Determine ahead/behind
        id: ahead
        run: |
          # Count commits ahead/behind: left=develop, right=main
          COUNTS=$(git rev-list --left-right --count origin/develop...origin/main)
          AHEAD_MAIN=$(echo "$COUNTS" | awk '{print $2}')
          BEHIND_MAIN=$(echo "$COUNTS" | awk '{print $1}')
          echo "origin/main ahead of origin/develop by: $AHEAD_MAIN"
          echo "origin/develop ahead of origin/main by: $BEHIND_MAIN"
          echo "ahead_main=$AHEAD_MAIN" >> $GITHUB_OUTPUT
          echo "ahead_develop=$BEHIND_MAIN" >> $GITHUB_OUTPUT

      - name: Fast-forward develop to main when possible
        if: steps.ahead.outputs.ahead_main != '0'
        run: |
          set -e
          git checkout -B develop origin/develop
          # Try fast-forward first
          if git merge --ff-only origin/main; then
            echo "Fast-forwarded develop to main."
            git push origin develop
            exit 0
          fi

          echo "Fast-forward not possible. Attempting a no-ff merge."
          # Attempt a no-ff merge (expected to be trivial when main was created from develop via PR)
          if git merge --no-ff --no-edit origin/main; then
            echo "Merged main into develop. Pushing..."
            git push origin develop
            exit 0
          fi

          echo "Merge conflict detected. Aborting merge and will open a PR from main -> develop."
          git merge --abort || true
          exit 2

      - name: Open PR main -> develop when conflicts exist
        if: failure() && steps.ahead.outputs.ahead_main != '0'
        env:
          GH_TOKEN: ${{ secrets.PR_CREATE_TOKEN }}
        run: |
          # Avoid duplicate PRs
          if gh pr list --base develop --head main --state open --json number --jq 'length' | grep -q '^0$'; then
            COMMIT_LIST=$(git log --no-merges --cherry --right-only --pretty='- %h %s (%an)' origin/develop...origin/main || true)
            COMPARE_URL="https://github.com/${GITHUB_REPOSITORY}/compare/develop...main"
            BODY_FILE=$(mktemp)
            {
              echo "Automated sync PR: \`main\` → \`develop\`."
              echo
              echo "This PR syncs changes merged into main back to develop."
              echo
              echo "### Compare"
              echo "$COMPARE_URL"
              echo
              echo "### Unique commits on main"
              if [ -n "$COMMIT_LIST" ]; then
                echo "$COMMIT_LIST"
              else
                echo "- No unique commits (unexpected)."
              fi
            } > "$BODY_FILE"

            gh pr create \
              --base develop \
              --head main \
              --title "Sync: main → develop" \
              --body-file "$BODY_FILE" \
              --label automated \
              --label sync
          else
            echo "An open PR from main to develop already exists. Skipping creation."
          fi

      - name: Nothing to sync
        if: steps.ahead.outputs.ahead_main == '0'
        run: echo "origin/main is not ahead of origin/develop. Nothing to sync." 