# .github/workflows/sca.yml
# Reusable workflow to run Retire.js SCA scan on a specific target.
# This version is self-contained (checkout, install) but uses caching for speed.
name: Reusable Software Component Analysis (Retire.js)

on:
  workflow_call:
    inputs:
      scan-target:
        description: 'The target to scan ("root", "backend", or "frontend")'
        required: true
        type: string
      artifact-name:
        description: 'The desired name for the uploaded report artifact (e.g., "frontend-retirejs-report")'
        required: true
        type: string
    outputs:
      vulnerabilities-found:
        description: 'Boolean indicating if vulnerabilities were found ("true" or "false")'
        value: ${{ jobs.scan.outputs.vulnerabilities-found }}
      report-artifact-name:
        description: "The actual name of the artifact uploaded"
        value: ${{ jobs.scan.outputs.report-artifact-name }}

jobs:
  scan:
    name: Retire.js Scan (${{ inputs.scan-target }})
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.check_report.outputs.vulnerabilities-found }}
      report-artifact-name: ${{ steps.set_artifact_name.outputs.artifact-name }}

    steps:
      # STEP 1: Checkout code - NECESSARY within the reusable workflow's job
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Keep if retire needs full history, else can remove

      # STEP 2: Setup Node.js - Also necessary here
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn" # Enable caching based on yarn.lock

      # STEP 3: Install dependencies - Necessary here, but cache makes it fast
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # STEP 4: Install Retire.js globally
      - name: Install Retire.js
        run: yarn global add retire@latest

      # STEP 5: Set Report Filename
      - name: Set Report Filename
        id: set_paths
        run: |
          echo "report_filename=retire-report-${{ inputs.scan-target }}.json" >> $GITHUB_OUTPUT

      # STEP 6: Run Retire.js Scan
      - name: Run Retire.js scan for ${{ inputs.scan-target }}
        id: retire_scan
        run: |
          REPORT_FILENAME="${{ steps.set_paths.outputs.report_filename }}"
          RUN_DIR="."
          OUTPUT_PATH="./$REPORT_FILENAME"

          if [[ "${{ inputs.scan-target }}" == "backend" ]]; then
            RUN_DIR="./backend"
          elif [[ "${{ inputs.scan-target }}" == "frontend" ]]; then
            RUN_DIR="./frontend"
          fi

          if [[ "$RUN_DIR" != "." ]] && [[ ! -d "$RUN_DIR" ]]; then
             echo "Error: Target directory '$RUN_DIR' not found after checkout."
             exit 1
          fi

          echo "Running retire scan in $RUN_DIR, outputting to $OUTPUT_PATH (relative to $RUN_DIR)"
          (cd $RUN_DIR && retire "." --outputformat json --outputpath "$OUTPUT_PATH" --exitwith 0 || true)

          if [[ -f "$RUN_DIR/$OUTPUT_PATH" ]]; then
            echo "Successfully created report file at $RUN_DIR/$OUTPUT_PATH"
          else
            echo "Warning: Report file $RUN_DIR/$OUTPUT_PATH was NOT created by retire."
          fi

      # STEP 7: Determine Full Report Path
      - name: Determine Full Report Path
        id: report_full_path
        run: |
          REPORT_FILENAME="${{ steps.set_paths.outputs.report_filename }}"
          REPORT_FULL_PATH="$REPORT_FILENAME"
          if [[ "${{ inputs.scan-target }}" == "backend" ]]; then
             REPORT_FULL_PATH="backend/$REPORT_FILENAME"
          elif [[ "${{ inputs.scan-target }}" == "frontend" ]]; then
             REPORT_FULL_PATH="frontend/$REPORT_FILENAME"
          fi
          echo "full_path=$REPORT_FULL_PATH" >> $GITHUB_OUTPUT
          echo "Resolved full report path relative to root: $REPORT_FULL_PATH"

      # STEP 8: Check Report Content - *** COMPLETED LOGIC ***
      - name: Check Report Content
        id: check_report
        run: |
          REPORT_FILE="${{ steps.report_full_path.outputs.full_path }}"
          VULNS_FOUND="false" # Default value

          if [[ ! -f "$REPORT_FILE" ]]; then
             echo "Check Report: File '$REPORT_FILE' not found. Assuming no vulnerabilities."
          else
             echo "Check Report: Found file '$REPORT_FILE'. Checking content..."
             # Use jq to count the number of results that have a non-empty 'vulnerabilities' array.
             # Handle potential missing .data field gracefully.
             COUNT=$(jq 'if .data then [.data[].results[] | select(.vulnerabilities | length > 0)] | length else 0 end' "$REPORT_FILE")
             JQ_EXIT_CODE=$? # Check jq exit status

             if [[ $JQ_EXIT_CODE -ne 0 ]]; then
               echo "Warning: jq command failed to parse '$REPORT_FILE' (exit code: $JQ_EXIT_CODE). Assuming no vulnerabilities."
               # Keep VULNS_FOUND="false"
             elif [[ "$COUNT" -gt 0 ]]; then
               echo "Check Report: Found $COUNT vulnerabilities."
               VULNS_FOUND="true" # Set to true if count is greater than 0
             else
               echo "Check Report: No vulnerabilities found in report content (count is $COUNT)."
               # Keep VULNS_FOUND="false"
             fi
          fi
          # Set the step output as a string "true" or "false"
          echo "vulnerabilities-found=$VULNS_FOUND" >> $GITHUB_OUTPUT

      # STEP 9: Set Artifact Name Output
      - name: Set Artifact Name Output
        id: set_artifact_name
        run: echo "artifact-name=${{ inputs.artifact-name }}" >> $GITHUB_OUTPUT

      # STEP 10: Upload Artifact
      - name: Upload Retire.js Report (${{ inputs.scan-target }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_artifact_name.outputs.artifact-name }}
          path: ${{ steps.report_full_path.outputs.full_path }}
          if-no-files-found: warn