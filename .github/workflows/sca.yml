# .github/workflows/sca.yml
# Reusable workflow to run Retire.js SCA scan on a specific target.
# This version is self-contained (checkout, install) but uses caching for speed.
name: Reusable Software Component Analysis (Retire.js)

on:
  workflow_call:
    inputs:
      scan-target:
        description: 'The target to scan ("root", "backend", or "frontend")'
        required: true
        type: string
      artifact-name:
        description: 'The desired name for the uploaded report artifact (e.g., "frontend-retirejs-report")'
        required: true
        type: string
    outputs:
      vulnerabilities-found:
        description: 'Boolean indicating if vulnerabilities were found ("true" or "false")'
        value: ${{ jobs.scan.outputs.vulnerabilities-found }}
      report-artifact-name:
        description: "The actual name of the artifact uploaded"
        value: ${{ jobs.scan.outputs.report-artifact-name }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scan:
    name: Retire.js Scan (${{ inputs.scan-target }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
<<<<<<< HEAD
=======
      security-events: write
>>>>>>> e6bdd77 (fix dependencies)
    outputs:
      vulnerabilities-found: ${{ steps.check_report.outputs.vulnerabilities-found }}
      report-artifact-name: ${{ inputs.artifact-name }}

    steps:
      # STEP 0: Checkout repository (required before using local actions)
      - name: Checkout repository
        uses: actions/checkout@v4

      # STEP 1: Set up scan environment (prepare report path)
      - name: Setup Scan Environment
        id: setup
        uses: ./.github/actions/scan-setup
        with:
          scan-target: ${{ inputs.scan-target }}
          artifact-name: ${{ inputs.artifact-name }}

      # STEP 2: Set up scan environment (prepare report path)
      - name: Setup Scan Environment
        id: setup
        uses: ./.github/actions/scan-setup
        with:
          scan-target: ${{ inputs.scan-target }}
          artifact-name: ${{ inputs.artifact-name }}

      # STEP 2: Setup Node.js - Also necessary here
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn" # Enable caching based on yarn.lock

      - name: Enable Corepack
        run: corepack enable

      # STEP 3: Install dependencies - Necessary here, but cache makes it fast
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # STEP 4: Run Retire.js Scan using npx (no global install)
      - name: Run Retire.js scan for ${{ inputs.scan-target }}
        id: retire_scan
        shell: bash
        env:
          REPORT_PATH: ${{ steps.setup.outputs.report-path }}
        run: |
          set -e
          TARGET_DIR="."
          case "${{ inputs.scan-target }}" in
            backend) TARGET_DIR="./backend" ;;
            frontend) TARGET_DIR="./frontend" ;;
            root|.) TARGET_DIR="." ;;
          esac

          if [[ "$TARGET_DIR" != "." ]] && [[ ! -d "$TARGET_DIR" ]]; then
             echo "Error: Target directory '$TARGET_DIR' not found after checkout."
             exit 1
          fi

          echo "Running retire scan on $TARGET_DIR, outputting to $REPORT_PATH"
          npx --yes retire "$TARGET_DIR" --outputformat json --outputpath "$REPORT_PATH" --exitwith 0 || true

          if [[ -f "$REPORT_PATH" ]]; then
            echo "Successfully created report file at $REPORT_PATH"
          else
            echo "Warning: Report file $REPORT_PATH was NOT created by retire."
          fi

      # STEP 5: Check Report Content
      - name: Check Report Content
        id: check_report
        shell: bash
        env:
          REPORT_PATH: ${{ steps.setup.outputs.report-path }}
        run: |
          REPORT_FILE="$REPORT_PATH"
          VULNS_FOUND="false" # Default value

          if [[ ! -f "$REPORT_FILE" ]]; then
             echo "Check Report: File '$REPORT_FILE' not found. Assuming no vulnerabilities."
          else
             echo "Check Report: Found file '$REPORT_FILE'. Checking content..."
             COUNT=$(jq 'if .data then [.data[].results[] | select(.vulnerabilities | length > 0)] | length else 0 end' "$REPORT_FILE")
             JQ_EXIT_CODE=$?

             if [[ $JQ_EXIT_CODE -ne 0 ]]; then
               echo "Warning: jq command failed to parse '$REPORT_FILE' (exit code: $JQ_EXIT_CODE). Assuming no vulnerabilities."
             elif [[ "$COUNT" -gt 0 ]]; then
               echo "Check Report: Found $COUNT vulnerabilities."
               VULNS_FOUND="true"
             else
               echo "Check Report: No vulnerabilities found in report content (count is $COUNT)."
             fi
          fi
          echo "vulnerabilities-found=$VULNS_FOUND" >> $GITHUB_OUTPUT

      # STEP 6: Upload Artifact
      - name: Upload Retire.js Report (${{ inputs.scan-target }})
        if: always() && (github.event_name == 'pull_request' || failure())
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ steps.setup.outputs.report-path }}
          if-no-files-found: warn
<<<<<<< HEAD
          retention-days: 7
=======
          retention-days: 7
>>>>>>> e6bdd77 (fix dependencies)
