<<<<<<< HEAD
name: SAST Scan
=======
# .github/workflows/sast.yml
name: Reusable SAST (Trufflehog)
>>>>>>> 2bbd7d3 (FIX: Add code checkout)

on:
  workflow_call:
    inputs:
      scan-target:
        description: 'The target to scan ("root", "backend", or "frontend")'
        required: true
        type: string
      artifact-name:
        description: 'The desired name for the uploaded report artifact (e.g., "frontend-trufflehog-report")'
        required: true
        type: string
<<<<<<< HEAD

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  trufflehog-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read

    steps:
      # Step 0: Checkout repository (required before using local actions)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Setup scan environment
=======
    outputs:
      vulnerabilities-found:
        description: 'Boolean indicating if vulnerabilities were found ("true" or "false")'
        value: ${{ jobs.scan.outputs.vulnerabilities-found }}
      report-artifact-name:
        description: "The actual name of the artifact uploaded"
        value: ${{ jobs.scan.outputs.report-artifact-name }}

jobs:
  scan:
    name: Trufflehog Scan (${{ inputs.scan-target }})
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.check_report.outputs.vulnerabilities-found }}
      report-artifact-name: ${{ steps.set_artifact.outputs.artifact-name }}

    steps:
      # STEP 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # STEP 2: Use reusable scan setup (installs dependencies / environment)
>>>>>>> 2bbd7d3 (FIX: Add code checkout)
      - name: Setup Scan Environment
        uses: ./.github/actions/scan-setup
        with:
          scan-target: ${{ inputs.scan-target }}
          artifact-name: ${{ inputs.artifact-name }}

<<<<<<< HEAD
      - name: "Debug: Check report directory"
        run: ls -l "$(dirname "${REPORT_PATH}")"
        shell: bash
        env:
          REPORT_PATH: ${{ steps.setup.outputs.report-path }}

      # Step 2: Install TruffleHog (resolve latest Linux binary via GitHub API)
      - name: Install TruffleHog
        shell: bash
        run: |
          set -euo pipefail

          # Ensure jq is available
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

          ARCHITECTURE="amd64"
          case "$(uname -m)" in
            x86_64|amd64) ARCHITECTURE="amd64" ;;
            aarch64|arm64) ARCHITECTURE="arm64" ;;
            *) echo "Unsupported architecture: $(uname -m)" >&2; exit 1 ;;
          esac

          echo "Detecting latest TruffleHog release asset for linux/${ARCHITECTURE}..."
          ASSET_URL=$(curl -fsSL https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest \
            | jq -r --arg arch "$ARCHITECTURE" '
                .assets[]
                | select((.name | test("linux"; "i")) and (.name | test($arch; "i")))
                | .browser_download_url
              ' | head -n1)

          if [[ -z "$ASSET_URL" ]]; then
            echo "Could not resolve TruffleHog asset URL for linux/${ARCHITECTURE}." >&2
            exit 1
          fi

          echo "Downloading: $ASSET_URL"
          curl -fsSL "$ASSET_URL" -o trufflehog_asset

          # If the asset is a tar.gz archive, extract the binary; otherwise treat as raw binary
          if file trufflehog_asset | grep -qi 'gzip compressed'; then
            tar -xzf trufflehog_asset trufflehog || tar -xzf trufflehog_asset
            if [[ -f trufflehog ]]; then
              sudo mv trufflehog /usr/local/bin/trufflehog
            else
              # Try to locate the binary within extracted contents
              EXTRACT_DIR=$(mktemp -d)
              tar -xzf trufflehog_asset -C "$EXTRACT_DIR"
              BIN_PATH=$(find "$EXTRACT_DIR" -type f -name 'trufflehog' | head -n1)
              if [[ -z "$BIN_PATH" ]]; then
                echo "Failed to locate trufflehog binary in archive." >&2
                exit 1
              fi
              sudo mv "$BIN_PATH" /usr/local/bin/trufflehog
            fi
          else
            chmod +x trufflehog_asset
            sudo mv trufflehog_asset /usr/local/bin/trufflehog
=======
      # STEP 3: Run Trufflehog scan
      - name: Run Trufflehog scan for ${{ inputs.scan-target }}
        id: trufflehog_scan
        run: |
          REPORT_FILE="trufflehog-report-${{ inputs.scan-target }}.json"
          SCAN_DIR="."
          if [[ "${{ inputs.scan-target }}" == "backend" ]]; then
            SCAN_DIR="./backend"
          elif [[ "${{ inputs.scan-target }}" == "frontend" ]]; then
            SCAN_DIR="./frontend"
          fi

          echo "Running Trufflehog scan in $SCAN_DIR, outputting to $REPORT_FILE"
          trufflehog filesystem "$SCAN_DIR" --json --exclude_paths 'node_modules|.git' > "$REPORT_FILE" || true

          if [[ -f "$REPORT_FILE" ]]; then
            echo "Report generated at $REPORT_FILE"
          else
            echo "Warning: Trufflehog did not produce a report!"
          fi

      # STEP 4: Check Report Content
      - name: Check Report Content
        id: check_report
        run: |
          REPORT_FILE="trufflehog-report-${{ inputs.scan-target }}.json"
          VULNS_FOUND="false"

          if [[ ! -f "$REPORT_FILE" ]]; then
            echo "No report found, assuming no vulnerabilities."
          else
            COUNT=$(jq 'length' "$REPORT_FILE")
            if [[ "$COUNT" -gt 0 ]]; then
              VULNS_FOUND="true"
              echo "Found $COUNT secrets in report."
            else
              echo "No secrets found in report."
            fi
>>>>>>> 2bbd7d3 (FIX: Add code checkout)
          fi

<<<<<<< HEAD
          trufflehog --version

      # Step 3: Run TruffleHog Scan (scoped to target dir and excluding noise)
      - name: Run TruffleHog Scan
        shell: bash
        env:
          REPORT_PATH: ${{ steps.setup.outputs.report-path }}
        run: |
          set -e
          TARGET_DIR="."
          case "${{ inputs.scan-target }}" in
            backend) TARGET_DIR="./backend" ;;
            frontend) TARGET_DIR="./frontend" ;;
            root|.) TARGET_DIR="." ;;
          esac

          if [[ "$TARGET_DIR" != "." ]] && [[ ! -d "$TARGET_DIR" ]]; then
            echo "Error: Target directory '$TARGET_DIR' not found after checkout."
            exit 1
          fi

          EXCLUDE_FILE=$(mktemp)
          printf '%s\n' '^\.git/' '(^|/)node_modules/' '(^|/)dist/' '(^|/)coverage/' '(^|/)yarn\.lock$' '(^|/)package-lock\.json$' '(^|/)pnpm-lock\.yaml$' > "$EXCLUDE_FILE"

          echo "Running trufflehog on $TARGET_DIR (excluding common noisy paths)"
          trufflehog filesystem --json --exclude-paths "$EXCLUDE_FILE" "$TARGET_DIR" > "$REPORT_PATH" || true

      # Step 4: Debug (list files)
      - name: Debug report files
        run: ls -l ./sast-reports/${{ inputs.scan-target }}

      - name: Upload TruffleHog Report
        if: always() && (github.event_name == 'pull_request' || failure())
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ steps.setup.outputs.report-path }}
          if-no-files-found: error
          retention-days: 7
=======
          echo "vulnerabilities-found=$VULNS_FOUND" >> $GITHUB_OUTPUT

      # STEP 5: Set artifact output
      - name: Set Artifact Name and Path
        id: set_artifact
        run: |
          REPORT_FILE="${{ inputs.scan-target }}-trufflehog-report.json"
          echo "artifact-name=${{ inputs.artifact-name }}" >> $GITHUB_OUTPUT
          echo "report-path=$REPORT_FILE" >> $GITHUB_OUTPUT

      # STEP 6: Upload Trufflehog report
      - name: Upload Trufflehog Report (${{ inputs.scan-target }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_artifact.outputs.artifact-name }}
          path: ${{ steps.set_artifact.outputs.report-path }}
          if-no-files-found: warn
>>>>>>> 2bbd7d3 (FIX: Add code checkout)
