name: Reusable SAST (TruffleHog)

on:
  workflow_call:
    inputs:
      scan-target:
        required: true
        type: string
      artifact-name:
        required: true
        type: string
    outputs:
      vulnerabilities-found:
        value: ${{ jobs.scan.outputs.vulnerabilities-found }}
      report-artifact-name:
        value: ${{ jobs.scan.outputs.report-artifact-name }}

jobs:
  scan:
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.check_report.outputs.vulnerabilities-found }}
      report-artifact-name: ${{ steps.set_artifact_name.outputs.artifact-name }}

    steps:
      - name: Setup Scan Environment
        uses: ./.github/actions/scan-setup
        id: setup
        with:
          scan-target: ${{ inputs.scan-target }}
          artifact-name: ${{ inputs.artifact-name }}

      - name: Run TruffleHog Scan
        id: trufflehog
        continue-on-error: true
        run: |
          mkdir -p trufflehog-output
          TARGET_DIRS="${{ inputs.scan-target }}"
          if [[ "$TARGET_DIRS" == "root" ]]; then TARGET_DIRS="."; fi
          docker run --rm \
            -v "${PWD}:/repo" \
            trufflesecurity/trufflehog:latest \
            filesystem /repo/$TARGET_DIRS \
            --json > "${{ steps.setup.outputs.report-filename }}" || true

      - name: Check Report Content
        id: check_report
        run: |
          FILE="${{ steps.setup.outputs.report-filename }}"
          SECRETS_FOUND="false"
          if [[ -f "$FILE" ]] && [[ -s "$FILE" ]] && jq -e . "$FILE" >/dev/null 2>&1; then
            COUNT=$(jq '. | length' "$FILE")
            if [[ "$COUNT" -gt 0 ]]; then SECRETS_FOUND="true"; fi
          fi
          echo "vulnerabilities-found=$SECRETS_FOUND" >> $GITHUB_OUTPUT

      - name: Set Artifact Name Output
        id: set_artifact_name
        run: echo "artifact-name=${{ steps.setup.outputs.artifact-name }}" >> $GITHUB_OUTPUT

      - name: Upload TruffleHog Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.setup.outputs.artifact-name }}
          path: ${{ steps.setup.outputs.report-filename }}
          if-no-files-found: error
