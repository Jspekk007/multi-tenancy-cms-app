name: Frontend CI, SCA and SAST

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
      - ".github/workflows/sca.yml"
      - ".github/workflows.sast.yml"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
      - ".github/workflows/sca.yml"
      - ".github/workflows.sast.yml"

jobs:
  build_and_lint:
    name: Frontend Build & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint on Frontend
        run: yarn workspace frontend lint

      - name: Build Frontend
        run: yarn workspace frontend build

  frontend_sca:
    name: Frontend SCA Scan
    needs: build_and_lint
    uses: ./.github/workflows/sca.yml
    with:
      scan-target: "frontend"
      artifact-name: "frontend-retirejs-report"
    secrets: inherit

  # --- NEW: Job to summarize and comment (or fail) ---
  summarize_sca:
    name: Summarize SCA Results
    runs-on: ubuntu-latest
    needs: [frontend_sca] # Depends on the frontend SCA scan completing
    # Only run for pull requests where commenting makes sense
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write # Needed for commenting
      actions: read # Needed to download artifacts
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # Download the artifact produced by the frontend_sca job
      - name: Download Frontend SCA Report
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.frontend_sca.outputs.report-artifact-name }} # Use output name
          path: ./sca-reports/frontend # Download to a specific directory

      # Add steps here to process the downloaded report(s)
      # This would involve adapting your original 'Summarize Findings' script
      # to read from the downloaded file(s) instead of locally generated ones.
      - name: Process Reports and Comment
        id: summary
        run: |
          set -e
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          COMMENT=""
          VULNS_FOUND=false # Reset flag for this summary job

          # --- Adapt your process_report function here ---
          # It should now read from the downloaded file, e.g., ./sca-reports/frontend/retire-report-frontend.json
          process_report() {
            local REPORT_FILE="$1"
            local REPORT_NAME="$2"
            # ... (rest of your existing process_report function) ...
          }

          # Process the downloaded report
          # Adjust path and name as needed
          process_report "./sca-reports/frontend/retire-report-frontend.json" "frontend"

          # --- Adapt your final commenting logic here ---
          if $VULNS_FOUND; then
             printf -v FINAL_SUMMARY '\n---\n%s' "*Please review the vulnerabilities listed above and update the dependencies.*"
             COMMENT+="$FINAL_SUMMARY"
             echo "Vulnerabilities found in frontend SCA. Setting output."
             echo "vulnerabilities_found=true" >> "$GITHUB_OUTPUT"
          else
             # Handle no vulnerabilities found case for the comment
             COMMENT+="✅ Frontend SCA scan passed — no vulnerabilities found.\n\n" # Example
             printf -v FINAL_SUMMARY '\n---\n%s' "*Retire.js scan completed for frontend. No vulnerabilities detected.*"
             COMMENT+="$FINAL_SUMMARY" # Or construct a combined comment if needed
             echo "No vulnerabilities found in frontend SCA."
             echo "vulnerabilities_found=false" >> "$GITHUB_OUTPUT"
          fi

          echo "--- Generated Comment (Frontend SCA) ---"
          printf '%s\n' "$COMMENT"
          echo "--- End Comment ---"

          # Post comment (or append if other scans also comment)
          gh api --method POST -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
            -f body="$COMMENT"

      # Optional: Fail the workflow based on the summary step's findings
      - name: Fail if vulnerabilities found
        if: steps.summary.outputs.vulnerabilities_found == 'true'
        run: |
          echo "❌ Retire.js found vulnerable components in frontend."
          exit 1
