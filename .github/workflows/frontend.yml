name: Frontend CI, SCA and SAST

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
      - ".github/workflows/sca.yml" # Trigger if reusable SCA workflow changes
      - ".github/workflows/sast.yml" # Trigger if reusable SAST workflow changes (assuming it exists)
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "frontend/**"
      - ".github/workflows/frontend.yml"
      - ".github/workflows/sca.yml"
      - ".github/workflows/sast.yml"

# Add permissions at the workflow level
permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  # Job 1: Setup, Install Dependencies, Build, Lint, and Cache
  build_and_lint:
    name: Frontend Build, Lint & Cache
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js environment with caching enabled for yarn
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn" # Automatically caches yarn dependencies based on lockfile

      # Install project dependencies using the cached yarn state if available
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Explicitly cache node_modules for potential use in other jobs (optional but can help)
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            frontend/node_modules # Cache specific workspace deps too if applicable
            backend/node_modules  # Cache specific workspace deps too if applicable
          # Key based on OS and the hash of the yarn lock file
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Run ESLint specifically on the frontend workspace
      - name: Run ESLint on Frontend
        run: yarn workspace frontend lint # Adjust if not using Yarn workspaces

      # Build the frontend application
      - name: Build Frontend
        run: yarn workspace frontend build # Adjust if not using Yarn workspaces

  # Job 2: Call the Reusable SCA Workflow
  frontend_sca:
    name: Frontend SCA Scan
    uses: ./.github/workflows/sca.yml
    with:
      scan-target: "frontend"
      artifact-name: "frontend-retirejs-report"
    secrets: inherit

  # Job 3: Call the Reusable SAST Workflow
  frontend_sast:
    name: SAST Scan
    uses: ./.github/workflows/sast.yml
    with:
      scan-target: "frontend"
      artifact-name: "frontend-trufflehog-report"
    secrets: inherit

  # Job 4: Summarize SCA Results (and optionally SAST) and Comment on PR
  summarize_security_scans:
    name: Summarize Security Scan Results
    runs-on: ubuntu-latest
    needs: [frontend_sca, frontend_sast]
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      actions: read
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download Frontend SCA Report
        uses: actions/download-artifact@v4
        with:
          name: frontend-retirejs-report
          path: ./sca-reports/frontend

      - name: Download Frontend SAST Report
        uses: actions/download-artifact@v4
        with:
          name: frontend-trufflehog-report
          path: ./sast-reports/frontend

      - name: Process Reports and Comment
        id: summary
        run: |
          set -e
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          COMMENT="" # Initialize empty comment body
          OVERALL_VULNS_FOUND=false

          # --- Process SCA Report ---
          echo "[DEBUG] Checking for SCA report file..."
          SCA_REPORT_TO_PROCESS="./sca-reports/frontend/retire-report-frontend.json"
          if [[ -f "$SCA_REPORT_TO_PROCESS" ]]; then
            echo "[DEBUG] Processing SCA report: $SCA_REPORT_TO_PROCESS"
            process_report "$SCA_REPORT_TO_PROCESS" "frontend"
          else
            echo "[DEBUG] Cannot process SCA report, file not found: $SCA_REPORT_TO_PROCESS"
            COMMENT+="⚠️ Could not find the downloaded SCA report for frontend.\n\n"
          fi

          # --- Process SAST Report ---
          echo "[DEBUG] Checking for SAST report file..."
          SAST_REPORT_TO_PROCESS="./sast-reports/frontend/frontend-trufflehog-report.json"
          if [[ -f "$SAST_REPORT_TO_PROCESS" ]]; then
            echo "[DEBUG] Processing SAST report: $SAST_REPORT_TO_PROCESS"
            process_report "$SAST_REPORT_TO_PROCESS" "frontend"
          else
            echo "[DEBUG] Cannot process SAST report, file not found: $SAST_REPORT_TO_PROCESS"
            COMMENT+="⚠️ Could not find the downloaded SAST report for frontend.\n\n"
          fi

          # --- Final Commenting Logic ---
          if $OVERALL_VULNS_FOUND; then
            COMMENT+="\n---\n*Please review the vulnerabilities listed above and update the dependencies.*"
            echo "vulnerabilities_found=true" >> "$GITHUB_OUTPUT"
          else
            COMMENT+="\n---\n*Security scans completed for frontend. No vulnerabilities detected.*"
            echo "vulnerabilities_found=false" >> "$GITHUB_OUTPUT"
          fi

          echo "Posting comment to PR $PR_NUMBER..."
          gh api --method POST -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
            -f body="$COMMENT"
          
      - name: Fail if vulnerabilities found
        if: steps.summary.outputs.vulnerabilities_found == 'true'
        run: |
          echo "❌ Security vulnerabilities found in frontend."
          exit 1
