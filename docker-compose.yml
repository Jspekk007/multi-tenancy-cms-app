services:
  frontend:
    env_file:
      - .env
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - .:/app
      - /app/frontend/node_modules  # Prevent overwriting installed dependencies
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    env_file:
      - .env
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/backend/node_modules  # Prevent overwriting installed dependencies
    depends_on:
      - db
    networks:
      - app-network
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}

  db:
    image: postgres:16-alpine
    container_name: backend-postgres
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  create-admin:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ./scripts/create-admin-user.sh
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - ADMIN_ID=${ADMIN_ID}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_TENANT_ID=${ADMIN_TENANT_ID}
    depends_on:
      - db
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
